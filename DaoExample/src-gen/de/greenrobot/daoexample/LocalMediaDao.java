package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.LocalMedia;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/** 
 * DAO for table LOCAL_MEDIA.
*/
public class LocalMediaDao extends AbstractDao<LocalMedia, Long> {

    public static final String TABLENAME = "LOCAL_MEDIA";

    /**
     * Properties of entity LocalMedia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Dir = new Property(1, String.class, "dir", false, "DIR");
        public final static Property File = new Property(2, String.class, "file", false, "FILE");
        public final static Property Size = new Property(3, Integer.class, "size", false, "SIZE");
    };


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END


    public LocalMediaDao(DaoConfig config) {
        super(config);
    }
    
    public LocalMediaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCAL_MEDIA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DIR' TEXT," + // 1: dir
                "'FILE' TEXT," + // 2: file
                "'SIZE' INTEGER);"); // 3: size
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCAL_MEDIA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocalMedia entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dir = entity.getDir();
        if (dir != null) {
            stmt.bindString(2, dir);
        }
 
        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(3, file);
        }
 
        Integer size = entity.getSize();
        if (size != null) {
            stmt.bindLong(4, size);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LocalMedia readEntity(Cursor cursor, int offset) {
        LocalMedia entity = new LocalMedia( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dir
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // file
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // size
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocalMedia entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDir(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LocalMedia entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LocalMedia entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    

    // KEEP METHODS - put your custom methods here
    private void keep() {

    }
    // KEEP METHODS END


}
