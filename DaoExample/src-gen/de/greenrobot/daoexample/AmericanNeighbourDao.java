package de.greenrobot.daoexample;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.greenrobot.daoexample.AmericanNeighbour;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/** 
 * DAO for table AMERICAN_NEIGHBOUR.
*/
public class AmericanNeighbourDao extends AbstractDao<AmericanNeighbour, Long> {

    public static final String TABLENAME = "AMERICAN_NEIGHBOUR";

    /**
     * Properties of entity AmericanNeighbour.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Channel_id = new Property(1, Integer.class, "channel_id", false, "CHANNEL_ID");
        public final static Property Request_url = new Property(2, String.class, "request_url", false, "REQUEST_URL");
        public final static Property Reponse = new Property(3, String.class, "reponse", false, "REPONSE");
        public final static Property List_index = new Property(4, Integer.class, "list_index", false, "LIST_INDEX");
        public final static Property Update_time = new Property(5, Integer.class, "update_time", false, "UPDATE_TIME");
        public final static Property Operation_type = new Property(6, Integer.class, "operation_type", false, "OPERATION_TYPE");
        public final static Property Operation = new Property(7, String.class, "operation", false, "OPERATION");
    };


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END


    public AmericanNeighbourDao(DaoConfig config) {
        super(config);
    }
    
    public AmericanNeighbourDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AMERICAN_NEIGHBOUR' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CHANNEL_ID' INTEGER," + // 1: channel_id
                "'REQUEST_URL' TEXT," + // 2: request_url
                "'REPONSE' TEXT," + // 3: reponse
                "'LIST_INDEX' INTEGER," + // 4: list_index
                "'UPDATE_TIME' INTEGER," + // 5: update_time
                "'OPERATION_TYPE' INTEGER," + // 6: operation_type
                "'OPERATION' TEXT);"); // 7: operation
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AMERICAN_NEIGHBOUR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AmericanNeighbour entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer channel_id = entity.getChannel_id();
        if (channel_id != null) {
            stmt.bindLong(2, channel_id);
        }
 
        String request_url = entity.getRequest_url();
        if (request_url != null) {
            stmt.bindString(3, request_url);
        }
 
        String reponse = entity.getReponse();
        if (reponse != null) {
            stmt.bindString(4, reponse);
        }
 
        Integer list_index = entity.getList_index();
        if (list_index != null) {
            stmt.bindLong(5, list_index);
        }
 
        Integer update_time = entity.getUpdate_time();
        if (update_time != null) {
            stmt.bindLong(6, update_time);
        }
 
        Integer operation_type = entity.getOperation_type();
        if (operation_type != null) {
            stmt.bindLong(7, operation_type);
        }
 
        String operation = entity.getOperation();
        if (operation != null) {
            stmt.bindString(8, operation);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AmericanNeighbour readEntity(Cursor cursor, int offset) {
        AmericanNeighbour entity = new AmericanNeighbour( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // channel_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // request_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // reponse
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // list_index
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // update_time
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // operation_type
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // operation
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AmericanNeighbour entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChannel_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRequest_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReponse(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setList_index(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setUpdate_time(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setOperation_type(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setOperation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AmericanNeighbour entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AmericanNeighbour entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END


}
