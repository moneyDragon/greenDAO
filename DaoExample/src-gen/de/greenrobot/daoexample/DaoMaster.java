package de.greenrobot.daoexample;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import de.greenrobot.daoexample.NoteDao;
import de.greenrobot.daoexample.CustomerDao;
import de.greenrobot.daoexample.OrderDao;
import de.greenrobot.daoexample.PlayHistoryDao;
import de.greenrobot.daoexample.LocalPlayHistoryDao;
import de.greenrobot.daoexample.AmericanNeighbourDao;
import de.greenrobot.daoexample.ApkDownloadDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/** 
 * Master of DAO (schema version 2): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 2;
    
    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END


    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        NoteDao.createTable(db, ifNotExists);
        CustomerDao.createTable(db, ifNotExists);
        OrderDao.createTable(db, ifNotExists);
        PlayHistoryDao.createTable(db, ifNotExists);
        LocalPlayHistoryDao.createTable(db, ifNotExists);
        AmericanNeighbourDao.createTable(db, ifNotExists);
        ApkDownloadDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        NoteDao.dropTable(db, ifExists);
        CustomerDao.dropTable(db, ifExists);
        OrderDao.dropTable(db, ifExists);
        PlayHistoryDao.dropTable(db, ifExists);
        LocalPlayHistoryDao.dropTable(db, ifExists);
        AmericanNeighbourDao.dropTable(db, ifExists);
        ApkDownloadDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(NoteDao.class);
        registerDaoClass(CustomerDao.class);
        registerDaoClass(OrderDao.class);
        registerDaoClass(PlayHistoryDao.class);
        registerDaoClass(LocalPlayHistoryDao.class);
        registerDaoClass(AmericanNeighbourDao.class);
        registerDaoClass(ApkDownloadDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    // KEEP METHODS - put your custom methods here
    public static class CustomOpenHelper extends OpenHelper {
        public CustomOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }
        
        @Override
        public void onCreate(SQLiteDatabase db) {
            createAllTables(db, false);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            upgradeVersion(db, oldVersion, newVersion);
        }
        
        /**
         * 对各个版本的数据库采取不同的升级策略
         * 
         * @param db 数据库对象
         */
        private void upgradeVersion(SQLiteDatabase db, int oldVersion, int newVersion) {
            for (int index = oldVersion + 1; index <= newVersion; index++) {
                updateVersion(db, oldVersion, index);
            }
        }

        /**
         * 升级到某个版本。跨版本升级时，会逐级升级到每个版本，直到最高版本。<br />
         * 比如版本1升级到版本4:<br />
         * 1>2>3>4
         * 
         * @param db 数据库对象
         * @param version 数据库将要升级到的版本号
         */
        private void updateVersion(SQLiteDatabase db, int oldVersion, int version) {
            switch (version) {
                case 2:
                    upgradeToVerTwo(db);
                    break;
                default:
                    onCreate(db);
                    break;
            }
        }

        /**
         * 从版本1升级到版本2,增加两张表,删除一张表,修改两张表
         */
        private void upgradeToVerTwo(SQLiteDatabase db) {
            try {
                // 新增表
                ApkDownloadDao.createTable(db, false);
                
                // 删除表
                LocalMediaDao.dropTable(db, false);
                
                // 修改表
                // 增加字段
                db.execSQL(sqlColumnADD(LocalPlayHistoryDao.TABLENAME, LocalPlayHistoryDao.Properties.LocalUrlNew.columnName,
                        "TEXT"));
                db.execSQL(sqlColumnADD(AmericanNeighbourDao.TABLENAME, AmericanNeighbourDao.Properties.Operation.columnName,
                        "TEXT"));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        
        /**
         * 获得添加列的语句
         * 
         * @param columnName
         * @return
         */
        private String sqlColumnADD(String tableName, String columnName, String otherCondition) {
            return "ALTER TABLE " + tableName + "  ADD COLUMN  [" + columnName + "] " + otherCondition;
        }
    }
    // KEEP METHODS END

}
